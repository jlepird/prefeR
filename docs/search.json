[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Lepird. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bayesian Preference Elicitation Multiobjective Engineering Design Optimization. John R. Lepird, Michael P. Owen, Mykel J. Kochenderfer. Journal Aerospace Information Systems 2015 12:10, 634-645","code":"@Article{,   author = {Lepird John and Owen Mykel and Kochenderfer Mykel},   title = {Bayesian Preference Elicitation for Engineering Design Optimization},   volume = {12},   number = {10},   pages = {634-645},   journal = {Journal of Aerospace Information Systems},   year = {2015}, }"},{"path":[]},{"path":"/index.html","id":"what-is-preference-elicitation","dir":"","previous_headings":"","what":"What is preference elicitation?","title":"R Package for Pairwise Preference Elicitation","text":"real-world decisions must reconcile multiple, competing objectives. buying car, might concerned cost, reliability, performance, can make decision, must establish relative importance goals. common mathematical approach problem define weights objectives. Although might ballpark intuition weights, difficult set repeatable defendable manner. Preference elicitation relieves burden. Instead determining weights directly, make series pairwise comparisons alternatives: prefer car , car B, indifferent? Research shown pairwise comparisons far easier make much easier justify explicitly setting weights directly. package implements preference elicitation algorithm takes stated preferences uses calculate optimal set weights. can even suggest comparisons make get accurate weights fewest number queries. Technical details package works can found article .","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Package for Pairwise Preference Elicitation","text":"package CRAN, can install directly install.packages().","code":"install.packages(\"prefeR\")"},{"path":[]},{"path":"/index.html","id":"hello-world","dir":"","previous_headings":"Examples","what":"Hello, World","title":"R Package for Pairwise Preference Elicitation","text":"","code":"library(prefeR)  # Each column of data is a variable, i.e. objective,  # and each row is an alternative. p <- prefEl(data = data.frame(x = c(1, 0, 1),                                y = c(0, 1, 1))) # Set the prior belief on the weights for objectives x and y p$priors <- c(Normal(0, 1),                Normal(0, 1))  # Add in some pairwise preferences p$addPref(1 %>% 3) # prefer row 1 to row 3 p$addPref(3 %<% 2) # prefer row 2 to row 3  # Run the inference p$infer()   # returns that x and y are of equal importance  # What comparision should you make next? p$suggest() # suggest compare 1 to 2 p$addPref(1 %=% 2)  # Re-run the infernence algorithm  p$infer()   # maintains belief that 1 and 2 are equal p$rank()    # calculates the value of all three alternatives"},{"path":"/index.html","id":"more-examples","dir":"","previous_headings":"","what":"More Examples","title":"R Package for Pairwise Preference Elicitation","text":"Choosing car mtcars dataset","code":""},{"path":"/reference/BayesPrefClass.html","id":null,"dir":"Reference","previous_headings":"","what":"An object containing all data necessary for preference elicitation. — BayesPrefClass","title":"An object containing all data necessary for preference elicitation. — BayesPrefClass","text":"object containing data necessary preference elicitation.","code":""},{"path":"/reference/BayesPrefClass.html","id":"fields","dir":"Reference","previous_headings":"","what":"Fields","title":"An object containing all data necessary for preference elicitation. — BayesPrefClass","text":"data matrix dataframe data. priors list functions give prior variable. sigma scalar value use confusion factor (default 0.1). Sigma (Internal use ) matrix sigma * diag(ncol(data)). strict list lists preferences. element x, x[[1]] > x[[2]]. indif list lists indifference preferences. element x, x[[1]] = x[[2]]. weights vector weights determined inference algorithm.","code":""},{"path":"/reference/BayesPrefClass.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"An object containing all data necessary for preference elicitation. — BayesPrefClass","text":"addPref(x) Adds preference created using %>%, %<%, %=%. infer(estimate = \"recommended\") Calls ``infer'' function guess weights rank() Calculates utility row dataset suggest(maxComparisons = 10) Calls ``suggest'' function guess weights","code":""},{"path":"/reference/Exp.html","id":null,"dir":"Reference","previous_headings":"","what":"A convenience function for generating Exponential priors. — Exp","title":"A convenience function for generating Exponential priors. — Exp","text":"convenience function generating Exponential priors.","code":""},{"path":"/reference/Exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A convenience function for generating Exponential priors. — Exp","text":"","code":"Exp(mu = 1)"},{"path":"/reference/Exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A convenience function for generating Exponential priors. — Exp","text":"mu mean exponential distribution, .e. \\(1/rate\\)","code":""},{"path":"/reference/Exp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A convenience function for generating Exponential priors. — Exp","text":"function yielding log-PDF x exponential distribution given statistics.","code":""},{"path":[]},{"path":"/reference/Exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A convenience function for generating Exponential priors. — Exp","text":"","code":"Exp(1)(1) == dexp(1,1, log = TRUE) #> [1] TRUE"},{"path":"/reference/Flat.html","id":null,"dir":"Reference","previous_headings":"","what":"A convenience function for generating a flat prior. — Flat","title":"A convenience function for generating a flat prior. — Flat","text":"convenience function generating flat prior.","code":""},{"path":"/reference/Flat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A convenience function for generating a flat prior. — Flat","text":"","code":"Flat()"},{"path":"/reference/Flat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A convenience function for generating a flat prior. — Flat","text":"zero function.","code":""},{"path":[]},{"path":"/reference/Flat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A convenience function for generating a flat prior. — Flat","text":"","code":"Flat()(1) == 0.0 #> [1] TRUE"},{"path":"/reference/Normal.html","id":null,"dir":"Reference","previous_headings":"","what":"A convenience function for generating Normal priors. — Normal","title":"A convenience function for generating Normal priors. — Normal","text":"convenience function generating Normal priors.","code":""},{"path":"/reference/Normal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A convenience function for generating Normal priors. — Normal","text":"","code":"Normal(mu = 0, sigma = 1)"},{"path":"/reference/Normal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A convenience function for generating Normal priors. — Normal","text":"mu mean normal distribution sigma standard deviation prior","code":""},{"path":"/reference/Normal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A convenience function for generating Normal priors. — Normal","text":"function yielding log-PDF x normal distribution given statistics.","code":""},{"path":[]},{"path":"/reference/Normal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A convenience function for generating Normal priors. — Normal","text":"","code":"Normal(0, 1)(1) == dnorm(1, log = TRUE) #> [1] TRUE"},{"path":"/reference/dot-calculateLogProb.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the log probability of seeing a given set of preferences — .calculateLogProb","title":"Calculates the log probability of seeing a given set of preferences — .calculateLogProb","text":"Calculates log probability seeing given set preferences","code":""},{"path":"/reference/dot-calculateLogProb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the log probability of seeing a given set of preferences — .calculateLogProb","text":"","code":".calculateLogProb(x, p)"},{"path":"/reference/dot-calculateLogProb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the log probability of seeing a given set of preferences — .calculateLogProb","text":"x guess weight vector p object Bayes preference class","code":""},{"path":"/reference/dot-calculateLogProb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the log probability of seeing a given set of preferences — .calculateLogProb","text":"scalar log-likelihood guess x","code":""},{"path":"/reference/dot-estimateEntropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the expected posterior entropy of the prefel object if x and y are compared. Ignores \nthe odds of indifference preferences, as using them would increase runtime 50% without much gain. — .estimateEntropy","title":"Calculates the expected posterior entropy of the prefel object if x and y are compared. Ignores \nthe odds of indifference preferences, as using them would increase runtime 50% without much gain. — .estimateEntropy","text":"Calculates expected posterior entropy prefel object x y compared. Ignores  odds indifference preferences, using increase runtime 50% without much gain.","code":""},{"path":"/reference/dot-estimateEntropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the expected posterior entropy of the prefel object if x and y are compared. Ignores \nthe odds of indifference preferences, as using them would increase runtime 50% without much gain. — .estimateEntropy","text":"","code":".estimateEntropy(p, currentGuess, x, y)"},{"path":"/reference/dot-estimateEntropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the expected posterior entropy of the prefel object if x and y are compared. Ignores \nthe odds of indifference preferences, as using them would increase runtime 50% without much gain. — .estimateEntropy","text":"p object class BayesPrefClass. currentGuess current best estimate weight vector. x Possible comparison 1 y Possible comparison 2","code":""},{"path":"/reference/dot-getLogIndifProb.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluates the likelihood of the observed indifference preferences — .getLogIndifProb","title":"Evaluates the likelihood of the observed indifference preferences — .getLogIndifProb","text":"Evaluates likelihood observed indifference preferences","code":""},{"path":"/reference/dot-getLogIndifProb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluates the likelihood of the observed indifference preferences — .getLogIndifProb","text":"","code":".getLogIndifProb(x, pref, p)"},{"path":"/reference/dot-getLogIndifProb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluates the likelihood of the observed indifference preferences — .getLogIndifProb","text":"x underlying data pref stated preference p preference elication object","code":""},{"path":"/reference/dot-getLogStrictProb.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluates the likelihood of the observed strict preferences — .getLogStrictProb","title":"Evaluates the likelihood of the observed strict preferences — .getLogStrictProb","text":"Evaluates likelihood observed strict preferences","code":""},{"path":"/reference/dot-getLogStrictProb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluates the likelihood of the observed strict preferences — .getLogStrictProb","text":"","code":".getLogStrictProb(x, pref, p)"},{"path":"/reference/dot-getLogStrictProb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluates the likelihood of the observed strict preferences — .getLogStrictProb","text":"x underlying data pref stated preference p preference elication object","code":""},{"path":"/reference/dot-sampleEntropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the entropy of a matrix of samples. — .sampleEntropy","title":"Calculates the entropy of a matrix of samples. — .sampleEntropy","text":"Calculates entropy matrix samples.","code":""},{"path":"/reference/dot-sampleEntropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the entropy of a matrix of samples. — .sampleEntropy","text":"","code":".sampleEntropy(X)"},{"path":"/reference/dot-sampleEntropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the entropy of a matrix of samples. — .sampleEntropy","text":"X matrix row sample variables different columns","code":""},{"path":"/reference/grapes-equals-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to add in preferences in a user-friendly way. — %=%","title":"A helper function to add in preferences in a user-friendly way. — %=%","text":"helper function add preferences user-friendly way.","code":""},{"path":"/reference/grapes-equals-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to add in preferences in a user-friendly way. — %=%","text":"","code":"a %=% b"},{"path":"/reference/grapes-equals-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to add in preferences in a user-friendly way. — %=%","text":"first alternative b second alternative","code":""},{"path":[]},{"path":"/reference/grapes-equals-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A helper function to add in preferences in a user-friendly way. — %=%","text":"","code":"1 %=% 2 # indifferent between 1 and 2 #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> attr(,\"class\") #> [1] \"list\"  \"indif\""},{"path":"/reference/grapes-greater-than-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to add in preferences in a user-friendly way. — %>%","title":"A helper function to add in preferences in a user-friendly way. — %>%","text":"helper function add preferences user-friendly way.","code":""},{"path":"/reference/grapes-greater-than-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to add in preferences in a user-friendly way. — %>%","text":"","code":"a %>% b"},{"path":"/reference/grapes-greater-than-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to add in preferences in a user-friendly way. — %>%","text":"preferred row b non-preferred row","code":""},{"path":[]},{"path":"/reference/grapes-greater-than-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A helper function to add in preferences in a user-friendly way. — %>%","text":"","code":"1 %>% 2 # prefer row 1 to row 2 #> [[1]] #> [1] 1 #>  #> [[2]] #> [1] 2 #>  #> attr(,\"class\") #> [1] \"list\"   \"strict\""},{"path":"/reference/grapes-less-than-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to add in preferences in a user-friendly way. — %<%","title":"A helper function to add in preferences in a user-friendly way. — %<%","text":"helper function add preferences user-friendly way.","code":""},{"path":"/reference/grapes-less-than-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to add in preferences in a user-friendly way. — %<%","text":"","code":"a %<% b"},{"path":"/reference/grapes-less-than-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to add in preferences in a user-friendly way. — %<%","text":"non-preferred row b preferred row","code":""},{"path":[]},{"path":"/reference/grapes-less-than-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A helper function to add in preferences in a user-friendly way. — %<%","text":"","code":"1 %<% 2 # prefer row 2 to row 1 #> [[1]] #> [1] 2 #>  #> [[2]] #> [1] 1 #>  #> attr(,\"class\") #> [1] \"list\"   \"strict\""},{"path":"/reference/infer.html","id":null,"dir":"Reference","previous_headings":"","what":"A function that estimates the user's underlying utility function. — infer","title":"A function that estimates the user's underlying utility function. — infer","text":"function estimates user's underlying utility function.","code":""},{"path":"/reference/infer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function that estimates the user's underlying utility function. — infer","text":"","code":"infer(p, estimate = \"recommended\", nbatch = 1000)"},{"path":"/reference/infer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function that estimates the user's underlying utility function. — infer","text":"p BayesPrefClass instance. estimate type posterior point-estimate returned. Valid options \"recommended\" (default), \"MAP\", \"mean\". nbatch using Monte Carlo estimates, number samples. Defaults 1000.","code":""},{"path":"/reference/infer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function that estimates the user's underlying utility function. — infer","text":"vector parameters best fits observed preferences.","code":""},{"path":"/reference/infer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function that estimates the user's underlying utility function. — infer","text":"","code":"p <- prefEl(data = data.frame(c(1,0,1), c(0,1,1), c(1,1,1)),              priors = c(Normal(0, 1), Exp(0.5), Flat()))  p$addPref(1 %>% 2)  infer(p, estimate = \"recommended\") #> c.1..0..1. c.0..1..1. c.1..1..1.  #>  0.7207189  0.2319684 -3.2777660"},{"path":"/reference/prefEl.html","id":null,"dir":"Reference","previous_headings":"","what":"A shortcut to create objects of the class BayesPrefClass. — prefEl","title":"A shortcut to create objects of the class BayesPrefClass. — prefEl","text":"shortcut create objects class BayesPrefClass.","code":""},{"path":"/reference/prefEl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A shortcut to create objects of the class BayesPrefClass. — prefEl","text":"","code":"prefEl(data = NA, priors = list(), ...)"},{"path":"/reference/prefEl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A shortcut to create objects of the class BayesPrefClass. — prefEl","text":"data matrix dataframe data. column variable, row observation. priors list functions give prior variable. E.g. see help(Flat) ... parameters pass class constructor. recommended.","code":""},{"path":"/reference/prefEl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A shortcut to create objects of the class BayesPrefClass. — prefEl","text":"","code":"p <- prefEl(data = data.frame(x = c(1,0,1), y = c(0, 1, 1)),             priors = c(Normal(0,1), Flat())) help(BayesPrefClass)"},{"path":"/reference/prefeR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"R Package for Pairwise Preference Elicitation — prefeR-package","title":"R Package for Pairwise Preference Elicitation — prefeR-package","text":"Allows users derive multi-objective weights pairwise comparisons,     research shows repeatable, transparent, intuitive techniques. weights     can rank existing alternatives define multi-objective utility function optimization.","code":""},{"path":"/reference/prefeR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R Package for Pairwise Preference Elicitation — prefeR-package","text":"Maintainer: John Lepird <jlepird@alum.mit.edu>","code":""},{"path":"/reference/prefeR-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"R Package for Pairwise Preference Elicitation — prefeR-package","text":"Lepird, J.R., Owen, M.P. & Kochenderfer, M.J. (2015)  Bayesian Preference Elicitation Multiobjective Engineering Design Optimization Journal Aerospace Information Systems 12:10, 634-645","code":""},{"path":"/reference/prefeR-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R Package for Pairwise Preference Elicitation — prefeR-package","text":"","code":"vignette(\"mtcars\") #> Warning: vignette ‘mtcars’ not found"},{"path":"/reference/suggest.html","id":null,"dir":"Reference","previous_headings":"","what":"Suggests a good comparison for the user to make next. — suggest","title":"Suggests a good comparison for the user to make next. — suggest","text":"Suggests good comparison user make next.","code":""},{"path":"/reference/suggest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Suggests a good comparison for the user to make next. — suggest","text":"","code":"suggest(p, maxComparisons = 10)"},{"path":"/reference/suggest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Suggests a good comparison for the user to make next. — suggest","text":"p object class BayesPrefClass. maxComparisons maximum number possible comparisons check. Default: 10.","code":""},{"path":"/reference/suggest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Suggests a good comparison for the user to make next. — suggest","text":"two-element vector recommended comparisons.","code":""}]
